// SPDX-License-Identifier: UNLICENSED

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol";

pragma solidity ^0.8.17;

contract shameCoin {
    uint256 private totalSupply = 10_000;
    address private owner;
}

constructor(address initialOwnerAddress) {
    // This is the administrator address
    owner = initialOwnerAddress;
}

function 



// Homework 19
// Write a 'shame coin' contract
// This will be similar to the ERC20 contract you have already written.
// 1. The shame coin needs to have an administrator address that is set in the constructor.
// 2. The decimal places should be set to 0.
// . The administrator can send 1 shame coin at a time to other addresses (but keep the
// transfer function signature the same)
// . If non administrators try to transfer their shame coin, the transfer function will instead
// increase their balance by one.
// . Non administrators can approve the administrator (and only the administrator) to
// spend one token on their behalf
// . The transfer from function should just reduce the balance of the holder.
// . Write unit tests to show that the functionality is correct.
// . Document the contract with Natspec, and produce docs from this
