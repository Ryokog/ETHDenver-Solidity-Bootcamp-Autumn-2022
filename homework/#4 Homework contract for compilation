//VolcanoCoin.sol

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract VolcanoCoin {

  uint256 totalSupply = 10000;
  address public owner;

  event transferHasTakenPlace(uint transferAmount, address _addr); 
  
  struct Payment {
         uint256 transferAmount;
         address _addr;
     }

 function tokenSupply() public {
 return totalSupply;
 }
 
 function addSupply() public {
 totalSupply += 1000 = newSupply;
 }
 
 modifier onlyOwner {
     if (msg.sender == owner) {
     _;
     }
    constructor() {
        owner = msg.sender;
        address owner;
    }
    if newSupply > totalSupply {
        emit newSupply;
    }

// #13 and 14
    mapping (address => uint256) public balances;

    function get(address _addr) public view returns {
        return balances[_addr];
    }

// from here on, I don't really know what I am doing...

 mapping (address => uint256) public payable toOwner;

 function transfer(uint256 amount, address _addr) public payable {
     mapping (address => uint256);
        emit transferHasTakenPlace(amount, _addr);
     }

 }


 }
