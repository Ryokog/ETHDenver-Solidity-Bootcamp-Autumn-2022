// Homework 7
// We made a payment mapping, but we havenʼt added all the functionality for it yet.
// Write a function to view the payment records, specifying the user as an input.
// What is the difference between doing this and making the mapping public ?
//. For the payments record mapping, create a function called recordPayment that
// takes
// . the senderʼs address,
// . the receiverʼs address and
// . the amount
// as an input, then creates a new payment record and adds the new record to the
// userʼs payment record.
// . Each time we make a transfer of tokens, we should call the this recordPayment
// function to record the transfer.


// SPDX-License-Identifier: UNLICENSED
// The above is the answer to #3


import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";

// #2
pragma solidity ^0.8.0;


// #1 The name of the file VolcanoCoin.sol

// #4
contract VolcanoCoin {

     // #5
    uint256 private totalSupply = 10_000;
    // #8
    address private owner;
    
    // #13 a) The best way is to use mapping. 
    // #13 b)
    mapping (address => uint256) private balances;

    // #19
    mapping(address => Payment[]) private userPayments;

    // #18
    struct Payment {
        address _addr;
        uint256 transferAmount;
    }

    // #12
    event TotalSupplyHasIncreased(address _addr, uint256 transferAmount); 
    // #17&19
    event TransferHasTakenPlace(address _addr, uint256 amount);

    // #9
    modifier onlyOwner {
        require(msg.sender == owner); 
        _;
    }

    // #11&15
    // Following a security expert's advice, adding "initialOwner" to secure the process
    constructor(address initialOwnersAddress) {
        owner = initialOwnersAddress;
        balances[owner] = totalSupply;
    }

    // #6
    function getTotalSupply() public view returns(uint256) {
        return totalSupply;
        // return supplyIncrease would literally return the function without calling it.
    }

    // #14 One way is to use public. The other way is to use view function
    function get(address _addr) public view returns(uint256){
        return balances[_addr];
    }

    // #7&10&12
    function supplyIncrease() public onlyOwner {
   
    // Commenting out below as it may not be needed in the current compiler version
    //require(msg.sender == owner);
        totalSupply += 1_000;
        emit TotalSupplyHasIncreased(msg.sender, totalSupply);
    }

    // #16
    // #17
    // Logitally, a transfer is that a sender's account balance decreases whereas a receiver's
    // account balance increases. State the obvious in code.
    function transfer(address _addr, uint256 amount) public {
        balances[msg.sender] -= amount;
        balances[_addr] += amount;
        // Homework 7 #3
        recordPayment(msg.sender, _addr, amount);
        emit TransferHasTakenPlace(_addr, amount);
    }

    // Homework 7 #1
    // The difference is that we can keep the record of other users private.
    function viewPaymentRecords(address user) public view returns(Payment[] memory) {
        return userPayments[user];
    }

    // Homework 7 #2
    function recordPayment(address sender, address receiver, uint256 amount) public {
        Payment memory _payment = Payment(receiver, amount);
        userPayments[sender].push(_payment);
    }
}
    







// Homework 7
// We made a payment mapping, but we havenʼt added all the functionality for it yet.
// Write a function to view the payment records, specifying the user as an input.
// What is the difference between doing this and making the mapping public ?
//. For the payments record mapping, create a function called recordPayment that
// takes
// . the senderʼs address,
// . the receiverʼs address and
// . the amount
// as an input, then creates a new payment record and adds the new record to the
// userʼs payment record.
// . Each time we make a transfer of tokens, we should call the this recordPayment
// function to record the transfer.
